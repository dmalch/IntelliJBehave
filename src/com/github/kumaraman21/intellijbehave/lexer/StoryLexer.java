/* The following code was generated by JFlex 1.4.3 on 4/10/14 1:49 PM */

package com.github.kumaraman21.intellijbehave.lexer;

import com.github.kumaraman21.intellijbehave.parser.StoryTypes;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/10/14 1:49 PM from the specification file
 * <tt>C:/work/IntelliJBehave/src/com/github/kumaraman21/intellijbehave/lexer/Story.flex</tt>
 */
class StoryLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_META = 14;
  public static final int IN_GIVEN = 8;
  public static final int IN_DIRECTIVE = 2;
  public static final int IN_THEN = 12;
  public static final int YYINITIAL = 0;
  public static final int IN_EXAMPLES = 18;
  public static final int IN_SCENARIO = 6;
  public static final int IN_WHEN = 10;
  public static final int IN_TABLE = 16;
  public static final int IN_STORY = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\40\1\36\13\0"+
    "\1\37\14\0\1\16\5\0\1\5\1\34\3\0\1\21\1\0\1\27"+
    "\5\0\1\17\5\0\1\6\1\33\2\0\1\31\11\0\1\12\1\0"+
    "\1\7\1\35\1\10\2\0\1\32\1\14\2\0\1\25\1\23\1\11"+
    "\1\15\1\24\1\0\1\13\1\26\1\20\1\0\1\30\1\0\1\22"+
    "\3\0\1\4\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\1\2\11\1\1\3\1\4\7\3\1\5"+
    "\1\6\7\5\12\3\1\2\10\3\2\7\1\10\7\7"+
    "\1\11\2\12\1\11\1\13\7\11\1\6\7\3\7\1"+
    "\7\0\7\5\1\0\2\14\1\0\1\6\7\0\4\14"+
    "\2\0\7\7\7\11\7\0\4\1\6\0\1\15\6\5"+
    "\12\0\6\16\2\0\6\7\6\11\6\0\3\1\6\0"+
    "\4\5\1\14\13\0\4\7\4\11\4\0\2\1\1\0"+
    "\1\17\1\0\1\20\1\21\1\22\2\5\7\0\2\7"+
    "\2\11\2\0\2\1\2\0\2\5\3\0\6\14\2\7"+
    "\2\11\2\0\2\1\2\0\2\5\2\0\5\23\5\24"+
    "\5\25\2\7\2\11\15\0\1\26\1\27\14\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\102\0\143\0\204\0\245\0\306\0\347"+
    "\0\u0108\0\u0129\0\u014a\0\u016b\0\u018c\0\u01ad\0\u01ce\0\u01ef"+
    "\0\u0210\0\u0231\0\u0252\0\u0273\0\u0294\0\u02b5\0\u02b5\0\u02d6"+
    "\0\u02f7\0\u0318\0\u0339\0\u035a\0\u037b\0\u039c\0\u03bd\0\u01ad"+
    "\0\u03de\0\u03ff\0\u0420\0\u0441\0\u0462\0\u0483\0\u04a4\0\u04c5"+
    "\0\u04e6\0\u0507\0\u0528\0\u0549\0\u056a\0\u058b\0\u05ac\0\u05cd"+
    "\0\u05ee\0\u060f\0\u0630\0\u0651\0\u0672\0\u0693\0\u06b4\0\u06d5"+
    "\0\u06f6\0\u0717\0\u0738\0\u0759\0\u077a\0\u079b\0\u07bc\0\u07dd"+
    "\0\u07fe\0\u081f\0\u0840\0\u0861\0\u0882\0\u08a3\0\u016b\0\u08c4"+
    "\0\u02b5\0\u08e5\0\u0906\0\u0927\0\u0948\0\u0969\0\u098a\0\u09ab"+
    "\0\u02b5\0\u09cc\0\u09ed\0\u0a0e\0\u0a2f\0\u0a50\0\u0a71\0\u0a92"+
    "\0\u0ab3\0\u0ad4\0\u0af5\0\u0b16\0\u0b37\0\u0b58\0\u0b79\0\u0b9a"+
    "\0\u0bbb\0\u0bdc\0\u0bfd\0\u0c1e\0\u0c3f\0\u0c60\0\u0c81\0\u0ca2"+
    "\0\u0cc3\0\u0ce4\0\u0d05\0\u0d26\0\u0d47\0\u05ee\0\u0d68\0\u0d89"+
    "\0\u04e6\0\u0daa\0\u0dcb\0\u0dec\0\u0e0d\0\u0e2e\0\u0e4f\0\u0e70"+
    "\0\u0e91\0\u0eb2\0\u0ed3\0\u0ef4\0\u0f15\0\u0f36\0\u0f57\0\u0f78"+
    "\0\u0f99\0\u0fba\0\u0fdb\0\u0ffc\0\u101d\0\u103e\0\u105f\0\u1080"+
    "\0\u10a1\0\u10c2\0\u10e3\0\u1104\0\u1125\0\u1146\0\u1167\0\u1188"+
    "\0\u11a9\0\u11ca\0\u11eb\0\u120c\0\u122d\0\u124e\0\u126f\0\u1290"+
    "\0\u12b1\0\u12d2\0\u12f3\0\u1314\0\u1335\0\u1356\0\u1377\0\u1398"+
    "\0\u13b9\0\u13da\0\u13fb\0\u141c\0\u143d\0\u145e\0\u147f\0\u14a0"+
    "\0\u14c1\0\u14e2\0\u1503\0\u1524\0\u1545\0\u1566\0\u1587\0\u02b5"+
    "\0\u145e\0\u147f\0\u14a0\0\u14c1\0\u016b\0\u15a8\0\u15c9\0\u15ea"+
    "\0\u160b\0\u162c\0\u164d\0\u166e\0\u168f\0\u16b0\0\u16d1\0\u16f2"+
    "\0\u1713\0\u1734\0\u1755\0\u1776\0\u1797\0\u17b8\0\u17d9\0\u17fa"+
    "\0\u181b\0\u183c\0\u185d\0\u187e\0\u189f\0\u18c0\0\u18e1\0\u1902"+
    "\0\u1923\0\u1944\0\u1965\0\u1986\0\u19a7\0\u19c8\0\u02b5\0\u19e9"+
    "\0\u1a0a\0\u1a2b\0\u1a4c\0\u1a6d\0\u1a8e\0\u1aaf\0\u1ad0\0\u1af1"+
    "\0\u1b12\0\u1b33\0\u1b54\0\u1b75\0\u1b96\0\u1bb7\0\u1bd8\0\u1bf9"+
    "\0\u1c1a\0\u1c3b\0\u1c5c\0\u1c7d\0\u1c9e\0\u1cbf\0\u1ce0\0\u1d01"+
    "\0\u1d22\0\u02b5\0\u1d43\0\u02b5\0\u02b5\0\u02b5\0\u1d64\0\u1d85"+
    "\0\u1da6\0\u1dc7\0\u1de8\0\u1e09\0\u1e2a\0\u1e4b\0\u1e6c\0\u1e8d"+
    "\0\u1eae\0\u1ecf\0\u1ef0\0\u1f11\0\u1f32\0\u1f53\0\u1f74\0\u1f95"+
    "\0\u1fb6\0\u1fd7\0\u1ff8\0\u2019\0\u203a\0\u205b\0\u207c\0\u209d"+
    "\0\u20be\0\u20df\0\u2100\0\u2121\0\u2142\0\u2163\0\u2184\0\u21a5"+
    "\0\u21c6\0\u21e7\0\u2208\0\u2229\0\u224a\0\u226b\0\u228c\0\u22ad"+
    "\0\u22ce\0\u22ef\0\u02b5\0\u145e\0\u2310\0\u2331\0\u2352\0\u02b5"+
    "\0\u145e\0\u2373\0\u2394\0\u23b5\0\u02b5\0\u145e\0\u23d6\0\u23f7"+
    "\0\u2418\0\u2439\0\u245a\0\u247b\0\u249c\0\u24bd\0\u24de\0\u24ff"+
    "\0\u2520\0\u2541\0\u2562\0\u2583\0\u25a4\0\u25c5\0\u25e6\0\u2607"+
    "\0\u2628\0\u2649\0\u02b5\0\u02b5\0\u266a\0\u268b\0\u26ac\0\u26cd"+
    "\0\u26ee\0\u270f\0\u2730\0\u2751\0\u2772\0\u2793\0\u27b4\0\u27d5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\2\14\1\15\1\16\1\13\1\17\10\13\1\20"+
    "\1\13\1\21\5\13\1\22\1\13\1\23\1\13\1\23"+
    "\1\24\1\13\1\25\1\13\1\15\1\26\3\14\1\27"+
    "\1\26\1\30\10\26\1\31\1\26\1\32\5\26\1\33"+
    "\1\26\1\34\1\26\1\35\2\26\1\36\1\26\1\14"+
    "\1\26\3\14\34\26\1\14\1\37\3\14\1\40\1\37"+
    "\1\41\10\37\1\42\1\37\1\43\5\37\1\44\1\37"+
    "\1\45\1\37\1\45\1\46\1\37\1\47\1\37\1\14"+
    "\1\50\3\14\1\51\1\50\1\52\10\50\1\53\1\50"+
    "\1\54\5\50\1\55\1\50\1\56\1\50\1\56\1\57"+
    "\1\50\1\60\1\50\1\14\1\61\2\14\1\62\1\51"+
    "\1\61\1\63\10\61\1\64\1\61\1\65\5\61\1\66"+
    "\1\61\1\67\1\61\1\67\1\70\1\61\1\71\1\61"+
    "\1\62\1\61\2\14\1\62\1\51\1\61\1\63\10\61"+
    "\1\64\1\61\1\65\5\61\1\66\1\61\1\67\1\61"+
    "\1\67\1\72\1\61\1\71\1\61\1\62\1\73\2\14"+
    "\1\74\1\40\1\75\1\76\10\73\1\77\1\73\1\100"+
    "\5\73\1\101\1\73\1\102\1\73\1\102\1\103\1\73"+
    "\1\104\1\73\1\74\1\105\1\106\1\107\1\110\1\111"+
    "\1\105\1\112\10\105\1\113\1\105\1\114\5\105\1\115"+
    "\1\105\1\116\1\105\1\116\1\117\1\105\1\120\1\105"+
    "\1\110\1\26\3\14\1\121\1\26\1\122\10\26\1\123"+
    "\1\26\1\124\5\26\1\125\1\26\1\126\1\26\1\126"+
    "\1\127\1\26\1\130\1\26\1\14\1\13\2\0\36\13"+
    "\1\0\3\14\34\0\1\14\1\13\2\14\1\15\34\13"+
    "\1\15\1\40\2\0\36\40\1\13\2\0\4\13\1\131"+
    "\32\13\2\0\5\13\1\132\31\13\2\0\17\13\1\133"+
    "\17\13\2\0\11\13\1\134\25\13\2\0\27\13\1\135"+
    "\7\13\2\0\6\13\1\136\30\13\2\0\34\13\1\137"+
    "\1\13\50\0\1\140\41\0\1\141\52\0\1\142\32\0"+
    "\1\143\56\0\1\144\40\0\1\145\45\0\1\146\1\0"+
    "\1\37\2\0\37\37\2\0\4\37\1\147\32\37\2\0"+
    "\5\37\1\150\31\37\2\0\17\37\1\151\17\37\2\0"+
    "\11\37\1\152\25\37\2\0\27\37\1\153\7\37\2\0"+
    "\6\37\1\154\30\37\2\0\34\37\1\155\1\37\1\156"+
    "\1\157\1\160\36\156\1\161\1\162\1\40\36\161\1\156"+
    "\1\157\1\160\4\156\1\163\32\156\1\157\1\160\5\156"+
    "\1\164\31\156\1\157\1\160\17\156\1\165\17\156\1\157"+
    "\1\160\11\156\1\166\25\156\1\157\1\160\27\156\1\167"+
    "\7\156\1\157\1\160\6\156\1\170\30\156\1\157\1\160"+
    "\34\156\1\171\2\156\1\172\1\173\37\156\1\174\1\175"+
    "\1\62\34\156\1\62\1\156\1\172\1\173\4\156\1\163"+
    "\32\156\1\172\1\173\5\156\1\164\31\156\1\172\1\173"+
    "\17\156\1\165\17\156\1\172\1\173\11\156\1\166\25\156"+
    "\1\172\1\173\27\156\1\167\7\156\1\172\1\173\6\156"+
    "\1\176\30\156\1\172\1\173\34\156\1\171\2\156\1\172"+
    "\1\173\6\156\1\177\27\156\1\73\2\0\2\73\1\0"+
    "\34\73\2\14\1\74\1\73\1\0\32\73\1\74\1\75"+
    "\3\0\34\75\1\0\1\73\2\0\2\73\1\0\1\73"+
    "\1\200\32\73\2\0\2\73\1\0\2\73\1\201\31\73"+
    "\2\0\2\73\1\0\14\73\1\202\17\73\2\0\2\73"+
    "\1\0\6\73\1\203\25\73\2\0\2\73\1\0\24\73"+
    "\1\204\7\73\2\0\2\73\1\0\3\73\1\205\30\73"+
    "\2\0\2\73\1\0\31\73\1\206\1\73\1\105\2\0"+
    "\1\105\1\0\34\105\1\0\1\14\1\107\1\14\34\0"+
    "\1\14\1\105\2\14\1\110\1\0\33\105\1\110\1\105"+
    "\2\0\1\105\1\0\2\105\1\207\32\105\2\0\1\105"+
    "\1\0\3\105\1\210\31\105\2\0\1\105\1\0\15\105"+
    "\1\211\17\105\2\0\1\105\1\0\7\105\1\212\25\105"+
    "\2\0\1\105\1\0\25\105\1\213\7\105\2\0\1\105"+
    "\1\0\4\105\1\214\30\105\2\0\1\105\1\0\32\105"+
    "\1\215\1\105\7\0\1\216\41\0\1\217\52\0\1\220"+
    "\32\0\1\221\56\0\1\222\17\0\1\223\66\0\1\224"+
    "\1\0\1\13\2\0\5\13\1\225\31\13\2\0\15\13"+
    "\1\226\21\13\2\0\7\13\1\227\27\13\2\0\25\13"+
    "\1\135\11\13\2\0\5\13\1\230\31\13\2\0\32\13"+
    "\1\16\4\13\2\0\34\13\1\16\1\13\10\0\1\231"+
    "\50\0\1\232\32\0\1\233\56\0\1\234\20\0\1\235"+
    "\40\0\1\236\67\0\1\237\1\0\1\37\2\0\5\37"+
    "\1\240\31\37\2\0\15\37\1\241\21\37\2\0\7\37"+
    "\1\242\27\37\2\0\25\37\1\243\11\37\2\0\5\37"+
    "\1\244\31\37\2\0\32\37\1\245\4\37\2\0\34\37"+
    "\1\40\1\37\2\0\1\160\1\0\1\246\22\0\1\247"+
    "\1\0\1\250\1\0\1\250\1\251\10\0\1\246\22\0"+
    "\1\247\1\0\1\250\1\0\1\250\1\251\4\0\1\40"+
    "\1\0\37\40\1\156\1\172\1\173\5\156\1\252\31\156"+
    "\1\172\1\173\15\156\1\253\21\156\1\172\1\173\7\156"+
    "\1\254\27\156\1\172\1\173\25\156\1\255\11\156\1\172"+
    "\1\173\5\156\1\256\31\156\1\172\1\173\32\156\1\257"+
    "\4\156\1\172\1\173\34\156\1\161\1\156\1\260\1\0"+
    "\1\173\1\260\1\261\22\260\1\262\1\260\1\263\1\260"+
    "\1\263\1\264\5\260\2\0\1\260\1\261\22\260\1\262"+
    "\1\260\1\263\1\260\1\263\1\264\5\260\1\14\1\175"+
    "\1\265\1\261\22\260\1\262\1\260\1\263\1\260\1\263"+
    "\1\264\3\260\1\265\1\260\2\14\1\265\1\261\22\260"+
    "\1\262\1\260\1\263\1\260\1\263\1\264\3\260\1\265"+
    "\1\156\1\172\1\173\32\156\1\266\4\156\1\172\1\173"+
    "\32\156\1\267\3\156\1\73\2\0\2\73\1\0\2\73"+
    "\1\270\31\73\2\0\2\73\1\0\12\73\1\271\21\73"+
    "\2\0\2\73\1\0\4\73\1\272\27\73\2\0\2\73"+
    "\1\0\22\73\1\273\11\73\2\0\2\73\1\0\2\73"+
    "\1\274\31\73\2\0\2\73\1\0\27\73\1\275\4\73"+
    "\2\0\2\73\1\0\31\73\1\40\1\73\1\105\2\0"+
    "\1\105\1\0\3\105\1\276\31\105\2\0\1\105\1\0"+
    "\13\105\1\277\21\105\2\0\1\105\1\0\5\105\1\300"+
    "\27\105\2\0\1\105\1\0\23\105\1\301\11\105\2\0"+
    "\1\105\1\0\3\105\1\302\31\105\2\0\1\105\1\0"+
    "\30\105\1\303\4\105\2\0\1\105\1\0\32\105\1\40"+
    "\1\105\10\0\1\304\50\0\1\305\32\0\1\306\56\0"+
    "\1\307\20\0\1\310\65\0\1\311\42\0\1\121\1\0"+
    "\1\13\2\0\6\13\1\312\30\13\2\0\7\13\1\313"+
    "\27\13\2\0\20\13\1\314\16\13\2\0\6\13\1\16"+
    "\27\13\11\0\1\315\41\0\1\316\51\0\1\317\25\0"+
    "\1\320\41\0\1\321\40\0\1\322\27\0\1\237\2\0"+
    "\36\237\1\37\2\0\6\37\1\323\30\37\2\0\7\37"+
    "\1\324\27\37\2\0\20\37\1\325\16\37\2\0\5\37"+
    "\1\326\31\37\2\0\6\37\1\245\30\37\2\0\35\37"+
    "\1\40\40\0\1\327\14\0\1\330\56\0\1\331\17\0"+
    "\1\332\27\0\1\156\1\172\1\173\6\156\1\333\30\156"+
    "\1\172\1\173\7\156\1\334\27\156\1\172\1\173\20\156"+
    "\1\335\16\156\1\172\1\173\5\156\1\336\31\156\1\172"+
    "\1\173\6\156\1\337\30\156\1\172\1\173\35\156\1\340"+
    "\1\156\1\172\1\173\35\156\1\341\1\156\1\172\1\173"+
    "\35\156\1\342\1\73\2\0\2\73\1\0\3\73\1\343"+
    "\30\73\2\0\2\73\1\0\4\73\1\344\27\73\2\0"+
    "\2\73\1\0\15\73\1\345\16\73\2\0\2\73\1\0"+
    "\2\73\1\346\31\73\2\0\2\73\1\0\3\73\1\275"+
    "\30\73\2\0\2\73\1\0\32\73\1\40\1\105\2\0"+
    "\1\105\1\0\4\105\1\347\30\105\2\0\1\105\1\0"+
    "\5\105\1\350\27\105\2\0\1\105\1\0\16\105\1\351"+
    "\16\105\2\0\1\105\1\0\3\105\1\352\31\105\2\0"+
    "\1\105\1\0\4\105\1\303\30\105\2\0\1\105\1\0"+
    "\33\105\1\40\11\0\1\353\41\0\1\354\51\0\1\355"+
    "\25\0\1\356\41\0\1\311\67\0\1\121\1\13\2\0"+
    "\7\13\1\357\27\13\2\0\13\13\1\16\23\13\2\0"+
    "\21\13\1\360\14\13\12\0\1\361\44\0\1\362\46\0"+
    "\1\363\25\0\1\364\67\0\1\365\40\0\1\366\1\37"+
    "\2\0\7\37\1\367\27\37\2\0\13\37\1\40\23\37"+
    "\2\0\21\37\1\370\15\37\2\0\6\37\1\40\27\37"+
    "\30\0\1\371\20\0\1\372\65\0\1\246\3\0\1\156"+
    "\1\172\1\173\7\156\1\373\27\156\1\172\1\173\13\156"+
    "\1\161\23\156\1\172\1\173\21\156\1\374\15\156\1\172"+
    "\1\173\6\156\1\161\30\156\1\172\1\173\35\156\1\161"+
    "\1\375\1\172\1\173\36\375\1\376\1\172\1\173\36\376"+
    "\1\377\1\172\1\173\36\377\1\73\2\0\2\73\1\0"+
    "\4\73\1\u0100\27\73\2\0\2\73\1\0\10\73\1\40"+
    "\23\73\2\0\2\73\1\0\16\73\1\u0101\15\73\2\0"+
    "\2\73\1\0\3\73\1\40\27\73\1\105\2\0\1\105"+
    "\1\0\5\105\1\u0102\27\105\2\0\1\105\1\0\11\105"+
    "\1\40\23\105\2\0\1\105\1\0\17\105\1\u0103\15\105"+
    "\2\0\1\105\1\0\4\105\1\40\27\105\12\0\1\u0104"+
    "\44\0\1\121\46\0\1\u0105\25\0\1\121\27\0\1\13"+
    "\2\0\10\13\1\u0106\26\13\2\0\22\13\1\u0107\13\13"+
    "\13\0\1\u0108\52\0\1\u0109\13\0\1\37\2\0\10\37"+
    "\1\u010a\26\37\2\0\22\37\1\u010b\13\37\10\0\1\u010c"+
    "\41\0\1\246\27\0\1\156\1\172\1\173\10\156\1\u010d"+
    "\26\156\1\172\1\173\22\156\1\u010e\13\156\1\375\1\u010f"+
    "\1\u0110\36\375\1\376\1\u0111\1\u0112\36\376\1\377\1\u0113"+
    "\1\u0114\36\377\1\73\2\0\2\73\1\0\5\73\1\u0115"+
    "\26\73\2\0\2\73\1\0\17\73\1\u0116\13\73\1\105"+
    "\2\0\1\105\1\0\6\105\1\u0117\26\105\2\0\1\105"+
    "\1\0\20\105\1\u0118\13\105\13\0\1\u0119\52\0\1\u011a"+
    "\13\0\1\13\2\0\11\13\1\u011b\25\13\2\0\5\13"+
    "\1\u011c\30\13\14\0\1\u011d\34\0\1\u011e\30\0\1\37"+
    "\2\0\11\37\1\u011f\25\37\2\0\5\37\1\u0120\30\37"+
    "\11\0\1\327\27\0\1\156\1\172\1\173\11\156\1\u0121"+
    "\25\156\1\172\1\173\5\156\1\u0122\30\156\1\u0123\1\0"+
    "\1\u0110\1\u0123\1\u0124\22\u0123\1\u0125\1\u0123\1\u0126\1\u0123"+
    "\1\u0126\1\u0127\5\u0123\2\0\1\u0123\1\u0124\22\u0123\1\u0125"+
    "\1\u0123\1\u0126\1\u0123\1\u0126\1\u0127\4\u0123\1\u0128\1\0"+
    "\1\u0112\1\u0128\1\u0129\22\u0128\1\u012a\1\u0128\1\u012b\1\u0128"+
    "\1\u012b\1\u012c\5\u0128\2\0\1\u0128\1\u0129\22\u0128\1\u012a"+
    "\1\u0128\1\u012b\1\u0128\1\u012b\1\u012c\4\u0128\1\u012d\1\0"+
    "\1\u0114\1\u012d\1\u012e\22\u012d\1\u012f\1\u012d\1\u0130\1\u012d"+
    "\1\u0130\1\u0131\5\u012d\2\0\1\u012d\1\u012e\22\u012d\1\u012f"+
    "\1\u012d\1\u0130\1\u012d\1\u0130\1\u0131\4\u012d\1\73\2\0"+
    "\2\73\1\0\6\73\1\u0132\25\73\2\0\2\73\1\0"+
    "\2\73\1\u0133\30\73\1\105\2\0\1\105\1\0\7\105"+
    "\1\u0134\25\105\2\0\1\105\1\0\3\105\1\u0135\30\105"+
    "\14\0\1\u0136\34\0\1\u0137\30\0\1\13\2\0\12\13"+
    "\1\313\24\13\2\0\23\13\1\313\12\13\15\0\1\u0138"+
    "\51\0\1\u0139\12\0\1\37\2\0\12\37\1\324\24\37"+
    "\2\0\23\37\1\324\12\37\1\156\1\172\1\173\12\156"+
    "\1\334\24\156\1\172\1\173\23\156\1\334\12\156\14\0"+
    "\1\u013a\56\0\1\u013b\17\0\1\u013c\43\0\1\u013d\56\0"+
    "\1\u013e\17\0\1\u013f\43\0\1\u0140\56\0\1\u0141\17\0"+
    "\1\u0142\27\0\1\73\2\0\2\73\1\0\7\73\1\344"+
    "\24\73\2\0\2\73\1\0\20\73\1\344\12\73\1\105"+
    "\2\0\1\105\1\0\10\105\1\350\24\105\2\0\1\105"+
    "\1\0\21\105\1\350\12\105\15\0\1\354\51\0\1\354"+
    "\30\0\1\u0143\40\0\1\u0144\52\0\1\u0145\20\0\1\u0146"+
    "\65\0\1\u0147\33\0\1\u0148\20\0\1\u0149\65\0\1\u014a"+
    "\33\0\1\u014b\20\0\1\u014c\65\0\1\u014d\13\0\1\u014e"+
    "\41\0\1\u0147\67\0\1\u0123\10\0\1\u014f\41\0\1\u014a"+
    "\67\0\1\u0128\10\0\1\u0150\41\0\1\u014d\67\0\1\u012d"+
    "\11\0\1\u0123\40\0\1\u0128\40\0\1\u012d\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10230];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\13\1\2\11\61\1\1\11\7\1\1\11\16\1"+
    "\7\0\7\1\1\0\2\1\1\0\1\1\7\0\4\1"+
    "\2\0\16\1\7\0\4\1\6\0\7\1\12\0\1\11"+
    "\5\1\2\0\14\1\6\0\3\1\6\0\4\1\1\11"+
    "\13\0\10\1\4\0\2\1\1\0\1\11\1\0\3\11"+
    "\2\1\7\0\4\1\2\0\2\1\2\0\2\1\3\0"+
    "\12\1\2\0\2\1\2\0\2\1\2\0\1\11\4\1"+
    "\1\11\4\1\1\11\10\1\15\0\2\11\14\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Stack<Integer> yystates = new Stack<Integer> () {{ push(YYINITIAL); }};
    private int currentStepStart = 0;
    public boolean trace = false;

    public void yystatePush(int yystate) {
        if(trace) System.out.println(">>>> PUSH: " + LexicalState.fromLexer(yystate) + " [" + reverseAndMap(yystates) + "]");
        yybegin(yystate);
        yystates.push(yystate);
    }

    private String reverseAndMap(Stack<Integer> yystates) {
        StringBuilder builder = new StringBuilder();
        for(int i=yystates.size()-1; i>=0; i--) {
            if(builder.length()>0)
                builder.append(", ");
            builder.append(LexicalState.fromLexer(yystates.get(i)));
        }
        return builder.toString();
    }

    public void yystatePopNPush(int yystate) {
        yystatePopNPush(1, yystate);
    }

    public void yystatePopNPush(int nb, int yystate) {
        if(trace) System.out.println(">>>> POP'n PUSH : #" + nb + ", " + LexicalState.fromLexer(yystate) + " [" + reverseAndMap(yystates) + "]");
        for (int i = 0; i < nb; i++) {
            yystatePop();
        }
        yystatePush(yystate);
    }

    public int yystatePop() {
        int popped = yystates.pop();
        if(trace) System.out.println(">>>> POP : " + LexicalState.fromLexer(popped) + " [" + reverseAndMap(yystates) + "]");
        if(!yystates.isEmpty()) {
            yybegin(yystates.peek());
        }// otherwise hopes a push will follow right after
        return popped;
    }

  public final int lastIndexOfCrLf(final CharSequence source) {
        final int length = source.length();
        boolean foundRfOrRn = false;

        for (int i = length - 1; i >= 0; i--) {
            final char c = source.charAt(i);
            if (c == '\r' || c == '\n') {
                foundRfOrRn = true;
            } else {
                if (foundRfOrRn) {
                    return i + 1;
                }
            }
        }

        if (foundRfOrRn) {
            return 0;
        } else {
            return -1;
        }
    }

    public void retrieveMultilineText() {
        yypushback(yytext().length() - lastIndexOfCrLf(yytext()));
        if(currentStepStart != 0) {
            zzStartRead = currentStepStart;
        }
    }

    public void setStepStart() {
        if(currentStepStart==0){
            currentStepStart = getTokenStart();
        }
    }

    public boolean checkAhead(char c) {

        if (zzMarkedPos >= zzBuffer.length()) {
            return false;
        }
        return zzBuffer.charAt(zzMarkedPos) == c;
    }


  StoryLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  StoryLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 106) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { return StoryTypes.TABLE_CELL;
          }
        case 24: break;
        case 5: 
          { return StoryTypes.SCENARIO_TEXT;
          }
        case 25: break;
        case 16: 
          { yystatePopNPush(2, IN_GIVEN);    currentStepStart = 0; return StoryTypes.GIVEN_TYPE;
          }
        case 26: break;
        case 8: 
          { return StoryTypes.META_KEY;
          }
        case 27: break;
        case 10: 
          { yystatePop(); yypushback(1);
          }
        case 28: break;
        case 23: 
          { yystatePopNPush(2, IN_EXAMPLES); return StoryTypes.EXAMPLE_TYPE;
          }
        case 29: break;
        case 2: 
          { return TokenType.WHITE_SPACE;
          }
        case 30: break;
        case 19: 
          { yypushback(yytext().length() - 4); currentStepStart = 0; return StoryTypes.GIVEN_TYPE;
          }
        case 31: break;
        case 18: 
          { yystatePopNPush(2, IN_THEN);     currentStepStart = 0; return StoryTypes.THEN_TYPE;
          }
        case 32: break;
        case 6: 
          { yystatePush(IN_DIRECTIVE); yypushback(yytext().length());
          }
        case 33: break;
        case 21: 
          { yypushback(yytext().length() - 4); currentStepStart = 0; return StoryTypes.THEN_TYPE;
          }
        case 34: break;
        case 12: 
          { retrieveMultilineText(); return StoryTypes.STEP_TEXT;
          }
        case 35: break;
        case 1: 
          { return StoryTypes.STORY_DESCRIPTION;
          }
        case 36: break;
        case 3: 
          { return StoryTypes.BAD_CHARACTER;
          }
        case 37: break;
        case 20: 
          { yypushback(yytext().length() - 4); currentStepStart = 0; return StoryTypes.WHEN_TYPE;
          }
        case 38: break;
        case 4: 
          { yystatePopNPush(1, IN_TABLE);    return StoryTypes.TABLE_DELIM;
          }
        case 39: break;
        case 22: 
          { yystatePopNPush(2, IN_SCENARIO); return StoryTypes.SCENARIO_TYPE;
          }
        case 40: break;
        case 15: 
          { yystatePopNPush(2, IN_META);     return StoryTypes.META_TYPE;
          }
        case 41: break;
        case 11: 
          { return StoryTypes.TABLE_DELIM;
          }
        case 42: break;
        case 14: 
          { setStepStart();
          }
        case 43: break;
        case 7: 
          { return StoryTypes.META_TEXT;
          }
        case 44: break;
        case 13: 
          { yystatePop();                    return StoryTypes.COMMENT;
          }
        case 45: break;
        case 17: 
          { yystatePopNPush(2, IN_WHEN);     currentStepStart = 0; return StoryTypes.WHEN_TYPE;
          }
        case 46: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
