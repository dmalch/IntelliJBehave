/* The following code was generated by JFlex 1.4.3 on 4/10/14 2:54 PM */

package com.github.kumaraman21.intellijbehave.lexer;

import com.github.kumaraman21.intellijbehave.parser.StoryTypes;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/10/14 2:54 PM from the specification file
 * <tt>C:/work/IntelliJBehave/src/com/github/kumaraman21/intellijbehave/lexer/Story.flex</tt>
 */
class StoryLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_META = 14;
  public static final int IN_GIVEN = 8;
  public static final int IN_DIRECTIVE = 2;
  public static final int IN_THEN = 12;
  public static final int YYINITIAL = 0;
  public static final int IN_EXAMPLES = 18;
  public static final int IN_SCENARIO = 6;
  public static final int IN_WHEN = 10;
  public static final int IN_TABLE = 16;
  public static final int IN_STORY = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\40\1\36\13\0"+
    "\1\37\14\0\1\25\5\0\1\5\1\16\3\0\1\30\1\0\1\6"+
    "\5\0\1\26\5\0\1\20\1\15\2\0\1\13\11\0\1\22\1\0"+
    "\1\21\1\17\1\11\2\0\1\14\1\7\2\0\1\34\1\32\1\12"+
    "\1\24\1\33\1\0\1\23\1\35\1\27\1\0\1\10\1\0\1\31"+
    "\3\0\1\4\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\1\2\11\1\1\3\1\4\7\3\1\5"+
    "\1\6\7\5\13\3\2\7\1\10\7\7\1\11\2\12"+
    "\1\11\1\13\6\11\1\6\7\3\7\1\7\0\7\5"+
    "\1\0\2\14\1\0\1\6\11\0\7\7\6\11\7\0"+
    "\4\1\6\0\1\15\4\5\5\16\7\0\4\7\4\11"+
    "\4\0\3\1\1\0\1\17\1\20\3\0\3\5\1\14"+
    "\11\0\3\7\3\11\3\0\2\1\1\21\1\0\1\22"+
    "\1\0\2\5\1\0\2\14\2\0\4\14\2\7\2\11"+
    "\2\0\2\1\2\0\2\5\5\23\2\0\5\24\5\25"+
    "\2\7\2\11\2\0\2\1\2\0\2\5\13\0\2\7"+
    "\2\11\7\0\1\26\1\27";

  private static int [] zzUnpackAction() {
    int [] result = new int[286];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\102\0\143\0\204\0\245\0\306\0\347"+
    "\0\u0108\0\u0129\0\u014a\0\u016b\0\u018c\0\u01ad\0\u01ce\0\u01ef"+
    "\0\u0210\0\u0231\0\u0252\0\u0273\0\u0294\0\u02b5\0\u02b5\0\u02d6"+
    "\0\u02f7\0\u0318\0\u0339\0\u035a\0\u037b\0\u039c\0\u03bd\0\u01ad"+
    "\0\u03de\0\u03ff\0\u0420\0\u0441\0\u0462\0\u0483\0\u04a4\0\u04c5"+
    "\0\u04e6\0\u0507\0\u0528\0\u0549\0\u056a\0\u058b\0\u05ac\0\u05cd"+
    "\0\u05ee\0\u060f\0\u0630\0\u0651\0\u0672\0\u0693\0\u06b4\0\u06d5"+
    "\0\u06f6\0\u0717\0\u0738\0\u0759\0\u077a\0\u079b\0\u016b\0\u07bc"+
    "\0\u02b5\0\u07dd\0\u07fe\0\u081f\0\u0840\0\u0861\0\u0882\0\u02b5"+
    "\0\u08a3\0\u08c4\0\u08e5\0\u0906\0\u0927\0\u0948\0\u0969\0\u098a"+
    "\0\u09ab\0\u09cc\0\u09ed\0\u0a0e\0\u0a2f\0\u0a50\0\u0a71\0\u0a92"+
    "\0\u0ab3\0\u0ad4\0\u0af5\0\u0b16\0\u0b37\0\u0b58\0\u0b79\0\u0b9a"+
    "\0\u0bbb\0\u0bdc\0\u0bfd\0\u0c1e\0\u04c5\0\u0c3f\0\u0c60\0\u04e6"+
    "\0\u0c81\0\u0ca2\0\u0cc3\0\u0ce4\0\u0d05\0\u0d26\0\u0d47\0\u0d68"+
    "\0\u0d89\0\u0daa\0\u0dcb\0\u0dec\0\u0e0d\0\u0e2e\0\u0e4f\0\u0e70"+
    "\0\u0e91\0\u0eb2\0\u0ed3\0\u0ef4\0\u0f15\0\u0f36\0\u0f57\0\u0f78"+
    "\0\u0f99\0\u0fba\0\u0fdb\0\u0ffc\0\u101d\0\u103e\0\u105f\0\u1080"+
    "\0\u10a1\0\u10c2\0\u10e3\0\u1104\0\u1125\0\u1146\0\u1167\0\u1188"+
    "\0\u11a9\0\u11ca\0\u11eb\0\u120c\0\u122d\0\u02b5\0\u124e\0\u126f"+
    "\0\u1290\0\u12b1\0\u12d2\0\u12f3\0\u1314\0\u1335\0\u1356\0\u1377"+
    "\0\u1398\0\u13b9\0\u13da\0\u13fb\0\u141c\0\u143d\0\u145e\0\u147f"+
    "\0\u14a0\0\u14c1\0\u14e2\0\u1503\0\u1524\0\u1545\0\u1566\0\u1587"+
    "\0\u15a8\0\u02b5\0\u02b5\0\u15c9\0\u15ea\0\u160b\0\u162c\0\u164d"+
    "\0\u166e\0\u02b5\0\u168f\0\u16b0\0\u16d1\0\u16f2\0\u1713\0\u1734"+
    "\0\u1755\0\u1776\0\u1797\0\u17b8\0\u17d9\0\u17fa\0\u181b\0\u183c"+
    "\0\u185d\0\u187e\0\u189f\0\u18c0\0\u18e1\0\u1902\0\u02b5\0\u1923"+
    "\0\u02b5\0\u1944\0\u1965\0\u1986\0\u19a7\0\u19c8\0\u19e9\0\u1a0a"+
    "\0\u1a2b\0\u1a4c\0\u1a6d\0\u1a8e\0\u1aaf\0\u1ad0\0\u1af1\0\u1b12"+
    "\0\u1b33\0\u1b54\0\u1b75\0\u1b96\0\u1bb7\0\u1bd8\0\u1bf9\0\u1c1a"+
    "\0\u1c3b\0\u02b5\0\u124e\0\u1c5c\0\u1c7d\0\u1c9e\0\u1cbf\0\u1ce0"+
    "\0\u02b5\0\u124e\0\u1d01\0\u1d22\0\u1d43\0\u02b5\0\u124e\0\u1d64"+
    "\0\u1d85\0\u1da6\0\u1dc7\0\u1de8\0\u1e09\0\u1e2a\0\u1e4b\0\u1e6c"+
    "\0\u1e8d\0\u1eae\0\u1ecf\0\u1ef0\0\u1f11\0\u1f32\0\u1f53\0\u1f74"+
    "\0\u1f95\0\u1fb6\0\u1fd7\0\u1ff8\0\u2019\0\u203a\0\u205b\0\u207c"+
    "\0\u209d\0\u20be\0\u20df\0\u2100\0\u2121\0\u2142\0\u2163\0\u2184"+
    "\0\u21a5\0\u21c6\0\u21e7\0\u2208\0\u02b5\0\u02b5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[286];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\2\14\1\15\1\16\1\13\1\17\4\13\1\20"+
    "\1\13\1\20\1\21\1\13\1\22\5\13\1\23\1\13"+
    "\1\24\5\13\1\25\1\13\1\15\1\26\3\14\1\27"+
    "\1\26\1\30\4\26\1\31\1\26\1\32\2\26\1\33"+
    "\5\26\1\34\1\26\1\35\5\26\1\36\1\26\1\14"+
    "\1\26\3\14\34\26\1\14\1\37\3\14\1\40\1\37"+
    "\1\41\4\37\1\42\1\37\1\42\1\43\1\37\1\44"+
    "\5\37\1\45\1\37\1\46\5\37\1\47\1\37\1\14"+
    "\1\50\3\14\1\51\1\50\1\52\4\50\1\53\1\50"+
    "\1\53\1\54\1\50\1\55\5\50\1\56\1\50\1\57"+
    "\5\50\1\60\1\50\1\14\1\50\3\14\1\51\1\50"+
    "\1\52\4\50\1\53\1\50\1\53\1\61\1\50\1\55"+
    "\5\50\1\56\1\50\1\57\5\50\1\60\1\50\1\14"+
    "\1\50\3\14\1\51\1\50\1\52\4\50\1\53\1\50"+
    "\1\53\1\62\1\50\1\55\5\50\1\56\1\50\1\57"+
    "\5\50\1\60\1\50\1\14\1\63\2\14\1\64\1\40"+
    "\1\65\1\66\4\63\1\67\1\63\1\67\1\70\1\63"+
    "\1\71\5\63\1\72\1\63\1\73\5\63\1\74\1\63"+
    "\1\64\1\75\1\76\1\77\1\100\1\101\1\75\1\102"+
    "\4\75\1\103\1\75\1\103\2\75\1\104\5\75\1\105"+
    "\1\75\1\106\5\75\1\107\1\75\1\100\1\26\3\14"+
    "\1\110\1\26\1\111\4\26\1\112\1\26\1\112\1\113"+
    "\1\26\1\114\5\26\1\115\1\26\1\116\5\26\1\117"+
    "\1\26\1\14\1\13\2\0\36\13\1\0\3\14\34\0"+
    "\1\14\1\13\2\14\1\15\34\13\1\15\1\40\2\0"+
    "\36\40\1\13\2\0\4\13\1\120\32\13\2\0\11\13"+
    "\1\121\25\13\2\0\7\13\1\122\27\13\2\0\16\13"+
    "\1\123\20\13\2\0\6\13\1\124\30\13\2\0\26\13"+
    "\1\125\10\13\2\0\34\13\1\126\1\13\50\0\1\127"+
    "\45\0\1\130\40\0\1\131\45\0\1\132\30\0\1\133"+
    "\60\0\1\134\46\0\1\135\1\0\1\37\2\0\37\37"+
    "\2\0\4\37\1\136\32\37\2\0\11\37\1\137\25\37"+
    "\2\0\7\37\1\140\27\37\2\0\16\37\1\141\20\37"+
    "\2\0\6\37\1\142\30\37\2\0\26\37\1\143\10\37"+
    "\2\0\34\37\1\144\1\37\1\145\1\146\1\147\36\145"+
    "\1\150\1\151\1\40\36\150\1\145\1\146\1\147\4\145"+
    "\1\152\32\145\1\146\1\147\11\145\1\153\25\145\1\146"+
    "\1\147\7\145\1\154\27\145\1\146\1\147\16\145\1\155"+
    "\20\145\1\146\1\147\6\145\1\156\30\145\1\146\1\147"+
    "\26\145\1\157\10\145\1\146\1\147\34\145\1\160\2\145"+
    "\1\146\1\147\7\145\1\161\27\145\1\146\1\147\7\145"+
    "\1\162\26\145\1\63\2\0\2\63\1\0\34\63\2\14"+
    "\1\64\1\63\1\0\32\63\1\64\1\65\3\0\34\65"+
    "\1\0\1\63\2\0\2\63\1\0\1\63\1\163\32\63"+
    "\2\0\2\63\1\0\6\63\1\164\25\63\2\0\2\63"+
    "\1\0\4\63\1\165\27\63\2\0\2\63\1\0\13\63"+
    "\1\166\20\63\2\0\2\63\1\0\3\63\1\167\30\63"+
    "\2\0\2\63\1\0\23\63\1\170\10\63\2\0\2\63"+
    "\1\0\31\63\1\171\1\63\1\75\2\0\1\75\1\0"+
    "\34\75\1\0\1\14\1\77\1\14\34\0\1\14\1\75"+
    "\2\14\1\100\1\0\33\75\1\100\1\75\2\0\1\75"+
    "\1\0\2\75\1\172\32\75\2\0\1\75\1\0\7\75"+
    "\1\173\25\75\2\0\1\75\1\0\14\75\1\174\20\75"+
    "\2\0\1\75\1\0\4\75\1\175\30\75\2\0\1\75"+
    "\1\0\24\75\1\176\10\75\2\0\1\75\1\0\32\75"+
    "\1\177\1\75\7\0\1\200\45\0\1\201\36\0\1\202"+
    "\47\0\1\203\30\0\1\204\60\0\1\205\46\0\1\206"+
    "\1\0\1\13\2\0\5\13\1\121\31\13\2\0\6\13"+
    "\1\207\30\13\2\0\14\13\1\16\22\13\2\0\6\13"+
    "\1\210\30\13\2\0\24\13\1\211\12\13\2\0\17\13"+
    "\1\212\17\13\2\0\34\13\1\16\1\13\10\0\1\213"+
    "\41\0\1\214\40\0\1\215\40\0\1\216\56\0\1\217"+
    "\33\0\1\220\55\0\1\221\1\0\1\37\2\0\5\37"+
    "\1\137\31\37\2\0\6\37\1\222\30\37\2\0\14\37"+
    "\1\40\22\37\2\0\6\37\1\223\30\37\2\0\24\37"+
    "\1\224\12\37\2\0\17\37\1\225\17\37\2\0\34\37"+
    "\1\40\1\37\1\226\1\0\1\147\1\226\1\227\1\226"+
    "\1\230\4\226\1\231\1\226\1\231\1\232\23\226\2\0"+
    "\1\226\1\227\1\226\1\230\4\226\1\231\1\226\1\231"+
    "\1\232\22\226\1\40\1\0\37\40\1\145\1\146\1\147"+
    "\5\145\1\153\31\145\1\146\1\147\6\145\1\233\30\145"+
    "\1\146\1\147\14\145\1\234\22\145\1\146\1\147\6\145"+
    "\1\235\30\145\1\146\1\147\24\145\1\236\12\145\1\146"+
    "\1\147\17\145\1\237\17\145\1\146\1\147\34\145\1\150"+
    "\2\145\1\146\1\147\14\145\1\240\22\145\1\146\1\147"+
    "\14\145\1\241\21\145\1\63\2\0\2\63\1\0\2\63"+
    "\1\164\31\63\2\0\2\63\1\0\3\63\1\242\30\63"+
    "\2\0\2\63\1\0\11\63\1\40\22\63\2\0\2\63"+
    "\1\0\3\63\1\243\30\63\2\0\2\63\1\0\21\63"+
    "\1\244\12\63\2\0\2\63\1\0\14\63\1\245\17\63"+
    "\2\0\2\63\1\0\31\63\1\40\1\63\1\75\2\0"+
    "\1\75\1\0\3\75\1\173\31\75\2\0\1\75\1\0"+
    "\4\75\1\246\30\75\2\0\1\75\1\0\4\75\1\247"+
    "\30\75\2\0\1\75\1\0\22\75\1\250\12\75\2\0"+
    "\1\75\1\0\15\75\1\251\17\75\2\0\1\75\1\0"+
    "\32\75\1\40\1\75\10\0\1\201\41\0\1\252\46\0"+
    "\1\110\32\0\1\253\56\0\1\254\33\0\1\255\55\0"+
    "\1\110\1\0\1\13\2\0\7\13\1\16\27\13\2\0"+
    "\7\13\1\256\27\13\2\0\17\13\1\257\17\13\2\0"+
    "\27\13\1\260\6\13\11\0\1\261\41\0\1\262\40\0"+
    "\1\263\40\0\1\264\50\0\1\265\50\0\1\266\6\0"+
    "\1\221\2\0\36\221\1\37\2\0\7\37\1\40\27\37"+
    "\2\0\7\37\1\267\27\37\2\0\17\37\1\270\17\37"+
    "\2\0\27\37\1\271\6\37\40\0\1\272\7\0\1\273"+
    "\45\0\1\274\36\0\1\275\26\0\1\145\1\146\1\147"+
    "\7\145\1\150\26\145\1\276\1\146\1\147\36\276\1\145"+
    "\1\146\1\147\7\145\1\277\27\145\1\146\1\147\17\145"+
    "\1\300\17\145\1\146\1\147\27\145\1\301\6\145\1\302"+
    "\1\146\1\147\36\302\1\303\1\146\1\147\36\303\1\63"+
    "\2\0\2\63\1\0\4\63\1\40\27\63\2\0\2\63"+
    "\1\0\4\63\1\304\27\63\2\0\2\63\1\0\14\63"+
    "\1\305\17\63\2\0\2\63\1\0\24\63\1\306\6\63"+
    "\1\75\2\0\1\75\1\0\5\75\1\40\27\75\2\0"+
    "\1\75\1\0\5\75\1\307\27\75\2\0\1\75\1\0"+
    "\15\75\1\310\17\75\2\0\1\75\1\0\25\75\1\311"+
    "\6\75\12\0\1\110\40\0\1\312\50\0\1\313\50\0"+
    "\1\314\6\0\1\13\2\0\17\13\1\315\17\13\2\0"+
    "\22\13\1\16\14\13\2\0\30\13\1\316\5\13\12\0"+
    "\1\317\50\0\1\320\43\0\1\321\46\0\1\322\5\0"+
    "\1\37\2\0\17\37\1\323\17\37\2\0\22\37\1\40"+
    "\14\37\2\0\30\37\1\324\5\37\10\0\1\274\41\0"+
    "\1\325\46\0\1\272\21\0\1\276\1\326\1\327\36\276"+
    "\1\145\1\146\1\147\17\145\1\330\17\145\1\146\1\147"+
    "\22\145\1\150\14\145\1\146\1\147\30\145\1\331\5\145"+
    "\1\302\1\332\1\333\36\302\1\303\1\334\1\335\36\303"+
    "\1\63\2\0\2\63\1\0\14\63\1\336\17\63\2\0"+
    "\2\63\1\0\17\63\1\40\14\63\2\0\2\63\1\0"+
    "\25\63\1\337\5\63\1\75\2\0\1\75\1\0\15\75"+
    "\1\340\17\75\2\0\1\75\1\0\20\75\1\40\14\75"+
    "\2\0\1\75\1\0\26\75\1\341\5\75\22\0\1\342"+
    "\43\0\1\110\46\0\1\343\5\0\1\13\2\0\20\13"+
    "\1\344\16\13\2\0\31\13\1\345\4\13\23\0\1\346"+
    "\51\0\1\347\4\0\1\37\2\0\20\37\1\350\16\37"+
    "\2\0\31\37\1\351\4\37\12\0\1\272\26\0\1\352"+
    "\1\0\1\327\1\352\1\353\1\352\1\354\4\352\1\355"+
    "\1\352\1\355\1\356\23\352\2\0\1\352\1\353\1\352"+
    "\1\354\4\352\1\355\1\352\1\355\1\356\22\352\1\145"+
    "\1\146\1\147\20\145\1\357\16\145\1\146\1\147\31\145"+
    "\1\360\4\145\1\361\1\0\1\333\1\361\1\362\1\361"+
    "\1\363\4\361\1\364\1\361\1\364\1\365\23\361\2\0"+
    "\1\361\1\362\1\361\1\363\4\361\1\364\1\361\1\364"+
    "\1\365\22\361\1\366\1\0\1\335\1\366\1\367\1\366"+
    "\1\370\4\366\1\371\1\366\1\371\1\372\23\366\2\0"+
    "\1\366\1\367\1\366\1\370\4\366\1\371\1\366\1\371"+
    "\1\372\22\366\1\63\2\0\2\63\1\0\15\63\1\373"+
    "\16\63\2\0\2\63\1\0\26\63\1\374\4\63\1\75"+
    "\2\0\1\75\1\0\16\75\1\375\16\75\2\0\1\75"+
    "\1\0\27\75\1\376\4\75\23\0\1\377\51\0\1\u0100"+
    "\4\0\1\13\2\0\4\13\1\u0101\32\13\2\0\6\13"+
    "\1\u0102\27\13\7\0\1\u0103\42\0\1\u0104\27\0\1\37"+
    "\2\0\4\37\1\u0105\32\37\2\0\6\37\1\u0106\27\37"+
    "\7\0\1\u0107\45\0\1\u0108\36\0\1\u0109\26\0\1\145"+
    "\1\146\1\147\4\145\1\u010a\32\145\1\146\1\147\6\145"+
    "\1\u010b\27\145\7\0\1\u010c\45\0\1\u010d\36\0\1\u010e"+
    "\35\0\1\u010f\45\0\1\u0110\36\0\1\u0111\26\0\1\63"+
    "\2\0\2\63\1\0\1\63\1\u0112\32\63\2\0\2\63"+
    "\1\0\3\63\1\u0113\27\63\1\75\2\0\1\75\1\0"+
    "\2\75\1\u0114\32\75\2\0\1\75\1\0\4\75\1\u0115"+
    "\27\75\7\0\1\u0116\42\0\1\u0117\27\0\1\13\2\0"+
    "\21\13\1\257\15\13\2\0\32\13\1\257\3\13\24\0"+
    "\1\u0118\51\0\1\u0119\3\0\1\37\2\0\21\37\1\270"+
    "\15\37\2\0\32\37\1\270\3\37\10\0\1\u0108\41\0"+
    "\1\u011a\46\0\1\352\21\0\1\145\1\146\1\147\21\145"+
    "\1\300\15\145\1\146\1\147\32\145\1\300\3\145\10\0"+
    "\1\u010d\41\0\1\u011b\46\0\1\361\31\0\1\u0110\41\0"+
    "\1\u011c\46\0\1\366\21\0\1\63\2\0\2\63\1\0"+
    "\16\63\1\305\15\63\2\0\2\63\1\0\27\63\1\305"+
    "\3\63\1\75\2\0\1\75\1\0\17\75\1\310\15\75"+
    "\2\0\1\75\1\0\30\75\1\310\3\75\24\0\1\313"+
    "\51\0\1\313\30\0\1\u011d\40\0\1\u011e\25\0\1\352"+
    "\40\0\1\361\40\0\1\366\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8745];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\13\1\2\11\51\1\1\11\6\1\1\11\16\1"+
    "\7\0\7\1\1\0\2\1\1\0\1\1\11\0\15\1"+
    "\7\0\4\1\6\0\5\1\1\11\4\1\7\0\10\1"+
    "\4\0\3\1\1\0\2\11\3\0\3\1\1\11\11\0"+
    "\6\1\3\0\2\1\1\11\1\0\1\11\1\0\2\1"+
    "\1\0\2\1\2\0\10\1\2\0\2\1\2\0\2\1"+
    "\1\11\4\1\2\0\1\11\4\1\1\11\10\1\2\0"+
    "\2\1\2\0\2\1\13\0\4\1\7\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[286];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Stack<Integer> yystates = new Stack<Integer> () {{ push(YYINITIAL); }};
    private int currentStepStart = 0;
    public boolean trace = false;

    public void yystatePush(int yystate) {
        if(trace) System.out.println(">>>> PUSH: " + LexicalState.fromLexer(yystate) + " [" + reverseAndMap(yystates) + "]");
        yybegin(yystate);
        yystates.push(yystate);
    }

    private String reverseAndMap(Stack<Integer> yystates) {
        StringBuilder builder = new StringBuilder();
        for(int i=yystates.size()-1; i>=0; i--) {
            if(builder.length()>0)
                builder.append(", ");
            builder.append(LexicalState.fromLexer(yystates.get(i)));
        }
        return builder.toString();
    }

    public void yystatePopNPush(int yystate) {
        yystatePopNPush(1, yystate);
    }

    public void yystatePopNPush(int nb, int yystate) {
        if(trace) System.out.println(">>>> POP'n PUSH : #" + nb + ", " + LexicalState.fromLexer(yystate) + " [" + reverseAndMap(yystates) + "]");
        for (int i = 0; i < nb; i++) {
            yystatePop();
        }
        yystatePush(yystate);
    }

    public int yystatePop() {
        int popped = yystates.pop();
        if(trace) System.out.println(">>>> POP : " + LexicalState.fromLexer(popped) + " [" + reverseAndMap(yystates) + "]");
        if(!yystates.isEmpty()) {
            yybegin(yystates.peek());
        }// otherwise hopes a push will follow right after
        return popped;
    }

  public final int lastIndexOfCrLf(final CharSequence source) {
        final int length = source.length();
        boolean foundRfOrRn = false;

        for (int i = length - 1; i >= 0; i--) {
            final char c = source.charAt(i);
            if (c == '\r' || c == '\n') {
                foundRfOrRn = true;
            } else {
                if (foundRfOrRn) {
                    return i + 1;
                }
            }
        }

        if (foundRfOrRn) {
            return 0;
        } else {
            return -1;
        }
    }

    public void retrieveMultilineText() {
        yypushback(yytext().length() - lastIndexOfCrLf(yytext()));
        if(currentStepStart != 0) {
            zzStartRead = currentStepStart;
        }
    }

    public void setStepStart() {
        if(currentStepStart==0){
            currentStepStart = getTokenStart();
        }
    }

    public boolean checkAhead(char c) {

        if (zzMarkedPos >= zzBuffer.length()) {
            return false;
        }
        return zzBuffer.charAt(zzMarkedPos) == c;
    }


  StoryLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  StoryLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 106) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { return StoryTypes.TABLE_CELL;
          }
        case 24: break;
        case 5: 
          { return StoryTypes.SCENARIO_TEXT;
          }
        case 25: break;
        case 17: 
          { yystatePopNPush(2, IN_GIVEN);    currentStepStart = 0; return StoryTypes.GIVEN_TYPE;
          }
        case 26: break;
        case 8: 
          { return StoryTypes.META_KEY;
          }
        case 27: break;
        case 19: 
          { yypushback(yytext().length() - 3); currentStepStart = 0; return StoryTypes.GIVEN_TYPE;
          }
        case 28: break;
        case 10: 
          { yystatePop(); yypushback(1);
          }
        case 29: break;
        case 23: 
          { yystatePopNPush(2, IN_EXAMPLES); return StoryTypes.EXAMPLE_TYPE;
          }
        case 30: break;
        case 2: 
          { return TokenType.WHITE_SPACE;
          }
        case 31: break;
        case 16: 
          { yystatePopNPush(2, IN_THEN);     currentStepStart = 0; return StoryTypes.THEN_TYPE;
          }
        case 32: break;
        case 6: 
          { yystatePush(IN_DIRECTIVE); yypushback(yytext().length());
          }
        case 33: break;
        case 12: 
          { retrieveMultilineText(); return StoryTypes.STEP_TEXT;
          }
        case 34: break;
        case 1: 
          { return StoryTypes.STORY_DESCRIPTION;
          }
        case 35: break;
        case 21: 
          { yypushback(yytext().length() - 3); currentStepStart = 0; return StoryTypes.THEN_TYPE;
          }
        case 36: break;
        case 3: 
          { return StoryTypes.BAD_CHARACTER;
          }
        case 37: break;
        case 4: 
          { yystatePopNPush(1, IN_TABLE);    return StoryTypes.TABLE_DELIM;
          }
        case 38: break;
        case 22: 
          { yystatePopNPush(2, IN_SCENARIO); return StoryTypes.SCENARIO_TYPE;
          }
        case 39: break;
        case 18: 
          { yystatePopNPush(2, IN_META);     return StoryTypes.META_TYPE;
          }
        case 40: break;
        case 20: 
          { yypushback(yytext().length() - 3); currentStepStart = 0; return StoryTypes.WHEN_TYPE;
          }
        case 41: break;
        case 11: 
          { return StoryTypes.TABLE_DELIM;
          }
        case 42: break;
        case 14: 
          { setStepStart();
          }
        case 43: break;
        case 7: 
          { return StoryTypes.META_TEXT;
          }
        case 44: break;
        case 13: 
          { yystatePop();                    return StoryTypes.COMMENT;
          }
        case 45: break;
        case 15: 
          { yystatePopNPush(2, IN_WHEN);     currentStepStart = 0; return StoryTypes.WHEN_TYPE;
          }
        case 46: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
